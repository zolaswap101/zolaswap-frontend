{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wmatic","address","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","lpAddress","account","useWeb3React","isMetaMaskInScope","window","ethereum","isMetaMask","justifyContent","width","height","href","symbol","variant","p","registerToken","ZOLA_LP_SYMBOL","ZOLA_LP_DECIMALS","fontWeight","ml","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","primaryToken","secondaryToken","flexDirection","split","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","BigNumber","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","IconButtonWrapper","StakeAction","tokenBalance","lpTotalSupply","location","useLocation","dispatch","useAppDispatch","useLpTokenPrice","lpPercent","isZero","multipliedBy","dividedBy","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","small","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getVelasScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","ControlContainer","ControllerWrapper","ContentWrapper","gradients","bubblegum","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledBg","bgUrl","NoContainer","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","useUserFarmsViewMode","setViewMode","sortOption","setSortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsdt","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","farmsCurrentlyVisible","rowData","PageHeader","Page","minHeight","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","target","textAlign","sort","b","exact","renderContent","Loading"],"mappings":"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","file":"static/js/9.03d62ab7.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'packages/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport tokens from 'config/constants/tokens'\n\nconst getLiquidityUrlPathParts = ({\n  quoteTokenAddress,\n  tokenAddress,\n}: {\n  quoteTokenAddress: string\n  tokenAddress: string\n}): string => {\n  const wBnbAddress = tokens.wmatic.address\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'MATIC' : quoteTokenAddress\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'MATIC' : tokenAddress\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { ZOLA_LP_DECIMALS, ZOLA_LP_SYMBOL } from 'config/constants'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton, Button, MetamaskIcon } from 'packages/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { registerToken } from 'utils/wallet'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n  lpAddress?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n  lpAddress,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\n  const tokenAddress = lpAddress || ''\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-start\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, ZOLA_LP_SYMBOL, ZOLA_LP_DECIMALS)}\n          >\n            <Text color=\"primary\" fontWeight=\"400\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from 'packages/uikit'\nimport { Token } from '@wagyu-swap/sdk'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {multiplier ? (\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={42} height={28} />\n          )}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from 'packages/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { formatBigNumber } from 'utils/formatBalance'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n\n    const balanceUnits = parseUnits(balance, decimals)\n    return formatBigNumber(balanceUnits, decimals, decimals)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from 'packages/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'packages/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await stakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal, Text } from 'packages/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpTotalSupply?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n  lpTotalSupply,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const lpPercent = lpTotalSupply.isZero()\n    ? 0\n    : stakedBalance.multipliedBy(new BigNumber(10000)).dividedBy(lpTotalSupply).toNumber() / 100\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Text small>{lpPercent < 0.01 ? '>0.01' : lpPercent.toFixed(2)}% of total LP</Text>\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'packages/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'ZOLA' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await callWithGasPrice(lpContract, 'approve', [\n        masterChefContract.address,\n        ethers.constants.MaxUint256,\n      ])\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from 'packages/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        lpTotalSupply={farm.lpTotalSupply}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          ZOLA\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from 'packages/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from 'packages/uikit'\nimport { DeserializedFarm } from 'state/types'\nimport { getVelasScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('ZOLA + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'ZOLA'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          cakePrice={cakePrice}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getVelasScanLink(lpAddress, 'address')}\n            infoAddress={`/info/pool/${lpAddress}`}\n            lpAddress={lpAddress}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from 'packages/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from 'packages/uikit'\nimport { Token } from '@wagyu-swap/sdk'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from 'packages/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from 'packages/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from 'packages/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 50px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of ZOLA rewards each farm receives, as a proportion of the ZOLA produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 ZOLA per block, a 40x farm would receive 40 ZOLA per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from 'packages/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from 'packages/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          ZOLA\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'ZOLA' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from 'packages/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n  lpTotalSupply,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const lpPercent = lpTotalSupply.isZero()\n    ? 0\n    : stakedBalance.multipliedBy(new BigNumber(10000)).dividedBy(lpTotalSupply).toNumber() / 100\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Text small>{lpPercent < 0.01 ? '>0.01' : lpPercent.toFixed(2)}% of total LP</Text>\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { ZOLA_LP_DECIMALS, ZOLA_LP_SYMBOL } from 'config/constants'\nimport { useTranslation } from 'contexts/Localization'\nimport { Button, Flex, LinkExternal, MetamaskIcon, Text } from 'packages/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getVelasScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { registerToken } from 'utils/wallet'\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { account } = useWeb3React()\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getVelasScanLink(lpAddress, 'address')\n  const info = `/info/pool/${lpAddress}`\n\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\n  const tokenAddress = lpAddress || ''\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        {account && isMetaMaskInScope && tokenAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <Button\n              variant=\"text\"\n              p=\"0\"\n              height=\"auto\"\n              onClick={() => registerToken(tokenAddress, ZOLA_LP_SYMBOL, ZOLA_LP_DECIMALS)}\n            >\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\n              <MetamaskIcon ml=\"4px\" />\n            </Button>\n          </Flex>\n        )}\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from 'packages/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from 'packages/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from 'packages/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from 'packages/uikit'\nimport { ViewMode } from 'state/user/actions'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'toggle' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'toggle' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from 'packages/uikit'\nimport { ChainId } from '@wagyu-swap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  background-color: #fff;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ControllerWrapper = styled.div`\n  background-color: #fff;\n`\n\nconst ContentWrapper = styled.div`\n  position: relative;\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledBg = styled.div<{ bgUrl: string }>`\n  position: absolute;\n  left: 20px;\n  right: 20px;\n  top: 20px;\n  bottom: 20px;\n  background-image: url(${(props) => props.bgUrl});\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n`\n\nconst NoContainer = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n  padding: 16px;\n`\n\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceUsdt) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceUsdt)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n        }\n        return farmsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (rowData.length === 0) {\n      return (\n        <NoContainer>\n          <Text textAlign=\"center\">No Pools</Text>\n        </NoContainer>\n      )\n    }\n\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader background=\"#fff\">\n        <Heading as=\"h1\" scale=\"xxl\" color=\"#ec9091\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake LP tokens to earn.')}\n        </Heading>\n      </PageHeader>\n      <ControllerWrapper>\n        <Page style={{ minHeight: 'unset' }}>\n          <ControlContainer>\n            <ViewControls>\n              <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n              <ToggleWrapper>\n                <Toggle\n                  id=\"staked-only-farms\"\n                  checked={stakedOnly}\n                  onChange={() => setStakedOnly(!stakedOnly)}\n                  scale=\"sm\"\n                />\n                <Text> {t('Staked only')}</Text>\n              </ToggleWrapper>\n              <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n            </ViewControls>\n            <FilterContainer>\n              <LabelWrapper>\n                <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n                <Select\n                  options={[\n                    {\n                      label: t('Hot'),\n                      value: 'hot',\n                    },\n                    {\n                      label: t('APR'),\n                      value: 'apr',\n                    },\n                    {\n                      label: t('Multiplier'),\n                      value: 'multiplier',\n                    },\n                    {\n                      label: t('Earned'),\n                      value: 'earned',\n                    },\n                    {\n                      label: t('Liquidity'),\n                      value: 'liquidity',\n                    },\n                  ]}\n                  onOptionChange={handleSortOptionChange}\n                />\n              </LabelWrapper>\n              <LabelWrapper style={{ marginLeft: 16 }}>\n                <Text textTransform=\"uppercase\">{t('Search')}</Text>\n                <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n              </LabelWrapper>\n            </FilterContainer>\n          </ControlContainer>\n        </Page>\n      </ControllerWrapper>\n      <ContentWrapper>\n        <StyledBg bgUrl=\"/images/farm/bg.svg\" />\n        <Page>\n          {renderContent()}\n          {account && !userDataLoaded && stakedOnly && (\n            <Flex justifyContent=\"center\">\n              <Loading />\n            </Flex>\n          )}\n          <div ref={observerRef} />\n        </Page>\n      </ContentWrapper>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}